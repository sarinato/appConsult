{"version":3,"file":"compiler-plugins.js","sourceRoot":"","sources":["../../src/plugins/compiler-plugins.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport { JSONObject } from '@expo/json-file';\nimport plist from '@expo/plist';\nimport { readFile, writeFile } from 'fs-extra';\nimport path from 'path';\nimport { XcodeProject } from 'xcode';\n\nimport { ConfigPlugin, ExportedConfig, ExportedConfigWithProps } from '../Plugin.types';\nimport { addWarningIOS } from '../WarningAggregator';\nimport { getEntitlementsPath } from '../ios/Entitlements';\nimport { InfoPlist } from '../ios/IosConfig.types';\nimport { getPbxproj, getProjectName } from '../ios/utils/Xcodeproj';\nimport { withInterceptedMod } from './core-plugins';\n\nexport function withCoreMods(config: ExportedConfig, projectRoot: string): ExportedConfig {\n  config = applyIOSCoreMods(projectRoot, config);\n  config = applyAndroidCoreMods(projectRoot, config);\n  return config;\n}\n\nexport function resolveModResults(results: any, platformName: string, modName: string) {\n  // If the results came from a mod, they'd be in the form of [config, data].\n  // Ensure the results are an array and omit the data since it should've been written by a data provider plugin.\n  const ensuredResults = results;\n\n  // Sanity check to help locate non compliant mods.\n  if (!ensuredResults || typeof ensuredResults !== 'object' || !ensuredResults?.mods) {\n    throw new Error(\n      `Mod \\`mods.${platformName}.${modName}\\` evaluated to an object that is not a valid project config. Instead got: ${JSON.stringify(\n        ensuredResults\n      )}`\n    );\n  }\n  return ensuredResults;\n}\n\nfunction applyAndroidCoreMods(projectRoot: string, config: ExportedConfig): ExportedConfig {\n  // TODO: Support android mods\n  return config;\n}\n\nfunction applyIOSCoreMods(projectRoot: string, config: ExportedConfig): ExportedConfig {\n  const { iosProjectDirectory, supportingDirectory } = getIOSPaths(projectRoot, config);\n\n  // Append a rule to supply Info.plist data to mods on `mods.ios.infoPlist`\n  config = withInterceptedMod<InfoPlist>(config, {\n    platform: 'ios',\n    mod: 'infoPlist',\n    async action({ modRequest: { nextMod, ...modRequest }, ...config }) {\n      let results: ExportedConfigWithProps<JSONObject> = {\n        ...config,\n        modRequest,\n      };\n\n      // Apply all of the Info.plist values to the expo.ios.infoPlist object\n      // TODO: Remove this in favor of just overwriting the Info.plist with the Expo object. This will enable people to actually remove values.\n      if (!config.ios) {\n        config.ios = {};\n      }\n      if (!config.ios.infoPlist) {\n        config.ios.infoPlist = {};\n      }\n\n      const filePath = path.resolve(iosProjectDirectory, 'Info.plist');\n      let data = plist.parse(await readFile(filePath, 'utf8'));\n\n      config.ios.infoPlist = {\n        ...(data || {}),\n        ...config.ios.infoPlist,\n      };\n      // TODO: Fix type\n      results = await nextMod!({\n        ...config,\n        modRequest,\n        modResults: config.ios.infoPlist as InfoPlist,\n      });\n      resolveModResults(results, modRequest.platform, modRequest.modName);\n      data = results.modResults;\n\n      await writeFile(filePath, plist.build(data));\n\n      return results;\n    },\n  });\n\n  // Append a rule to supply Expo.plist data to mods on `mods.ios.expoPlist`\n  config = withInterceptedMod<JSONObject>(config, {\n    platform: 'ios',\n    mod: 'expoPlist',\n    async action({ modRequest: { nextMod, ...modRequest }, ...config }) {\n      let results: ExportedConfigWithProps<JSONObject> = {\n        ...config,\n        modRequest,\n      };\n\n      try {\n        const filePath = path.resolve(supportingDirectory, 'Expo.plist');\n        let modResults = plist.parse(await readFile(filePath, 'utf8'));\n\n        // TODO: Fix type\n        results = await nextMod!({\n          ...config,\n          modResults,\n          modRequest,\n        });\n        resolveModResults(results, modRequest.platform, modRequest.modName);\n        modResults = results.modResults;\n\n        await writeFile(filePath, plist.build(modResults));\n      } catch (error) {\n        addWarningIOS(\n          'updates',\n          'Expo.plist configuration could not be applied. You will need to create Expo.plist if it does not exist and add Updates configuration manually.',\n          'https://docs.expo.io/bare/updating-your-app/#configuration-options'\n        );\n      }\n      return results;\n    },\n  });\n\n  // Append a rule to supply .xcodeproj data to mods on `mods.ios.xcodeproj`\n  config = withInterceptedMod<XcodeProject>(config, {\n    platform: 'ios',\n    mod: 'xcodeproj',\n    async action({ modRequest: { nextMod, ...modRequest }, ...config }) {\n      const modResults = getPbxproj(projectRoot);\n      // TODO: Fix type\n      const results = await nextMod!({\n        ...config,\n        modResults,\n        modRequest,\n      });\n      resolveModResults(results, modRequest.platform, modRequest.modName);\n      const resultData = results.modResults;\n      await writeFile(resultData.filepath, resultData.writeSync());\n      return results;\n    },\n  });\n\n  config = withEntitlementsBaseMod(config);\n\n  return config;\n}\n\nconst withEntitlementsBaseMod: ConfigPlugin<void> = config => {\n  // Append a rule to supply .entitlements data to mods on `mods.ios.entitlements`\n  return withInterceptedMod<JSONObject>(config, {\n    platform: 'ios',\n    mod: 'entitlements',\n    async action({ modRequest: { nextMod, ...modRequest }, ...config }) {\n      const entitlementsPath = getEntitlementsPath(modRequest.projectRoot);\n\n      let results: ExportedConfigWithProps<JSONObject> = {\n        ...config,\n        modRequest,\n      };\n\n      try {\n        const data = plist.parse(await readFile(entitlementsPath, 'utf8'));\n        // Apply all of the .entitlements values to the expo.ios.entitlements object\n        // TODO: Remove this in favor of just overwriting the .entitlements with the Expo object. This will enable people to actually remove values.\n        if (!config.ios) {\n          config.ios = {};\n        }\n        if (!config.ios.entitlements) {\n          config.ios.entitlements = {};\n        }\n\n        config.ios.entitlements = {\n          ...(data || {}),\n          ...config.ios.entitlements,\n        };\n\n        // TODO: Fix type\n        results = await nextMod!({\n          ...config,\n          modRequest,\n          modResults: config.ios.entitlements as JSONObject,\n        });\n        resolveModResults(results, modRequest.platform, modRequest.modName);\n        await writeFile(entitlementsPath, plist.build(results.modResults));\n      } catch (error) {\n        addWarningIOS('entitlements', `${entitlementsPath} configuration could not be applied.`);\n      }\n      return results;\n    },\n  });\n};\n\n// TODO: come up with a better solution for using app.json expo.name in various places\nfunction sanitizedName(name: string) {\n  return name\n    .replace(/[\\W_]+/g, '')\n    .normalize('NFD')\n    .replace(/[\\u0300-\\u036f]/g, '');\n}\n\n// TODO: it's silly and kind of fragile that we look at app config to determine\n// the ios project paths. Overall this function needs to be revamped, just a\n// placeholder for now! Make this more robust when we support applying config\n// at any time (currently it's only applied on eject).\nfunction getIOSPaths(projectRoot: string, exp: ExpoConfig) {\n  let projectName: string | null = null;\n\n  // Attempt to get the current ios folder name (apply).\n  try {\n    projectName = getProjectName(projectRoot);\n  } catch {\n    // If no iOS project exists then create a new one (eject).\n    projectName = exp.name;\n    if (!projectName) {\n      throw new Error('Your project needs a name in app.json/app.config.js.');\n    }\n    projectName = sanitizedName(projectName);\n  }\n\n  const iosProjectDirectory = path.join(projectRoot, 'ios', projectName);\n  const iconPath = path.join(iosProjectDirectory, 'Assets.xcassets', 'AppIcon.appiconset');\n  const supportingDirectory = path.join(iosProjectDirectory, 'Supporting');\n  return {\n    projectName,\n    supportingDirectory,\n    iosProjectDirectory,\n    iconPath,\n  };\n}\n"]}