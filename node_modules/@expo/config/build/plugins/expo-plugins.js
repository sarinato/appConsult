"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const IOSConfig = __importStar(require("../ios"));
const core_plugins_1 = require("./core-plugins");
/**
 * Config plugin to apply all of the custom Expo iOS config plugins we support by default.
 * TODO: In the future most of this should go into versioned packages like expo-facebook, expo-updates, etc...
 */
exports.withExpoIOSPlugins = (config, { bundleIdentifier, expoUsername }) => {
    // Set the bundle ID ahead of time.
    if (!config.ios)
        config.ios = {};
    config.ios.bundleIdentifier = bundleIdentifier;
    return core_plugins_1.withPlugins(config, [
        [IOSConfig.BundleIdenitifer.withBundleIdentifier, { bundleIdentifier }],
        IOSConfig.Branch.withBranch,
        IOSConfig.Facebook.withFacebook,
        IOSConfig.Google.withGoogle,
        IOSConfig.Name.withDisplayName,
        // IOSConfig.Name.withName,
        IOSConfig.Orientation.withOrientation,
        IOSConfig.RequiresFullScreen.withRequiresFullScreen,
        IOSConfig.Scheme.withScheme,
        IOSConfig.UserInterfaceStyle.withUserInterfaceStyle,
        IOSConfig.UsesNonExemptEncryption.withUsesNonExemptEncryption,
        IOSConfig.Version.withBuildNumber,
        IOSConfig.Version.withVersion,
        IOSConfig.Google.withGoogleServicesFile,
        [IOSConfig.Updates.withUpdates, { expoUsername }],
        // Entitlements
        IOSConfig.Entitlements.withAppleSignInEntitlement,
        IOSConfig.Entitlements.withAccessesContactNotes,
        // TODO: We don't have a mechanism for getting the apple team id here yet
        [IOSConfig.Entitlements.withICloudEntitlement, { appleTeamId: 'TODO-GET-APPLE-TEAM-ID' }],
        IOSConfig.Entitlements.withAssociatedDomains,
        // XcodeProject
        IOSConfig.DeviceFamily.withDeviceFamily,
        IOSConfig.Locales.withLocales,
        // Dangerous
        IOSConfig.Icons.withIcons,
        IOSConfig.SplashScreen.withSplashScreen,
    ]);
};
/**
 * Config plugin to apply all of the custom Expo Android config plugins we support by default.
 * TODO: In the future most of this should go into versioned packages like expo-facebook, expo-updates, etc...
 */
exports.withExpoAndroidPlugins = config => {
    return core_plugins_1.withPlugins(config, [
    // TODO: Support Android
    ]);
};
//# sourceMappingURL=expo-plugins.js.map