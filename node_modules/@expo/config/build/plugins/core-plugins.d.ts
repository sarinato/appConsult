import { ConfigPlugin, ExportedConfig, Mod, ModPlatform } from '../Plugin.types';
declare type AppliedConfigPlugin<T> = ConfigPlugin<T> | [ConfigPlugin<T>, T];
/**
 * Plugin to chain a list of plugins together.
 *
 * @param config exported config
 * @param plugins list of config config plugins to apply to the exported config
 */
export declare const withPlugins: ConfigPlugin<AppliedConfigPlugin<any>[]>;
/**
 * Plugin to extend a mod function in the plugins config.
 *
 * @param config exported config
 * @param platform platform to target (ios or android)
 * @param mod name of the platform function to extend
 * @param action method to run on the mod when the config is compiled
 */
export declare function withExtendedMod<T>(config: ExportedConfig, { platform, mod, action, }: {
    platform: ModPlatform;
    mod: string;
    action: Mod<T>;
}): ExportedConfig;
export declare function withInterceptedMod<T>(config: ExportedConfig, { platform, mod, action, }: {
    platform: ModPlatform;
    mod: string;
    action: Mod<T>;
}): ExportedConfig;
export {};
