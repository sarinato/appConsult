"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
function ensureArray(input) {
    if (Array.isArray(input)) {
        return input;
    }
    return [input];
}
/**
 * Plugin to chain a list of plugins together.
 *
 * @param config exported config
 * @param plugins list of config config plugins to apply to the exported config
 */
exports.withPlugins = (config, 
// TODO: Type this somehow if possible.
plugins) => {
    return plugins.reduce((prev, curr) => {
        const [plugins, args] = ensureArray(curr);
        return plugins(prev, args);
    }, config);
};
/**
 * Plugin to extend a mod function in the plugins config.
 *
 * @param config exported config
 * @param platform platform to target (ios or android)
 * @param mod name of the platform function to extend
 * @param action method to run on the mod when the config is compiled
 */
function withExtendedMod(config, { platform, mod, action, }) {
    return withInterceptedMod(config, {
        platform,
        mod,
        async action(_a) {
            var _b = _a.modRequest, { nextMod } = _b, modRequest = __rest(_b, ["nextMod"]), { modResults } = _a, config = __rest(_a, ["modRequest", "modResults"]);
            const results = await action(Object.assign({ modRequest, modResults: modResults }, config));
            return nextMod(results);
        },
    });
}
exports.withExtendedMod = withExtendedMod;
function withInterceptedMod(config, { platform, mod, action, }) {
    var _a;
    if (!config.mods) {
        config.mods = {};
    }
    if (!config.mods[platform]) {
        config.mods[platform] = {};
    }
    const modPlugin = (_a = config.mods[platform][mod]) !== null && _a !== void 0 ? _a : (config => config);
    const extendedMod = async (_a) => {
        var { modRequest } = _a, config = __rest(_a, ["modRequest"]);
        // console.log(`-[mod]-> ${platform}.${mod}`);
        return action(Object.assign(Object.assign({}, config), { modRequest: Object.assign(Object.assign({}, modRequest), { nextMod: modPlugin }) }));
    };
    config.mods[platform][mod] = extendedMod;
    return config;
}
exports.withInterceptedMod = withInterceptedMod;
//# sourceMappingURL=core-plugins.js.map