{"version":3,"file":"core-plugins.js","sourceRoot":"","sources":["../../src/plugins/core-plugins.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAEA,SAAS,WAAW,CAAI,KAAc;IACpC,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;QACxB,OAAO,KAAK,CAAC;KACd;IACD,OAAO,CAAC,KAAK,CAAC,CAAC;AACjB,CAAC;AAID;;;;;GAKG;AACU,QAAA,WAAW,GAA6C,CACnE,MAAM;AACN,uCAAuC;AACvC,OAAO,EACS,EAAE;IAClB,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE;QACnC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;QAC1C,OAAO,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC7B,CAAC,EAAE,MAAM,CAAC,CAAC;AACb,CAAC,CAAC;AAEF;;;;;;;GAOG;AACH,SAAgB,eAAe,CAC7B,MAAsB,EACtB,EACE,QAAQ,EACR,GAAG,EACH,MAAM,GAKP;IAED,OAAO,kBAAkB,CAAC,MAAM,EAAE;QAChC,QAAQ;QACR,GAAG;QACH,KAAK,CAAC,MAAM,CAAC,EAAiE;gBAA/D,kBAAsC,EAAtC,EAAc,OAAO,OAAiB,EAAf,oCAAa,EAAtC,EAA0C,UAAU,OAAa,EAAX,iDAAS;YAC1E,MAAM,OAAO,GAAG,MAAM,MAAM,iBAAG,UAAU,EAAE,UAAU,EAAE,UAAe,IAAK,MAAM,EAAG,CAAC;YACrF,OAAO,OAAQ,CAAC,OAAc,CAAC,CAAC;QAClC,CAAC;KACF,CAAC,CAAC;AACL,CAAC;AApBD,0CAoBC;AAED,SAAgB,kBAAkB,CAChC,MAAsB,EACtB,EACE,QAAQ,EACR,GAAG,EACH,MAAM,GAKP;;IAED,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE;QAChB,MAAM,CAAC,IAAI,GAAG,EAAE,CAAC;KAClB;IACD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;QAC1B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;KAC5B;IAED,MAAM,SAAS,SACZ,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAyB,CAAC,GAAG,CAAC,mCAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;IAE5E,MAAM,WAAW,GAAW,KAAK,EAAE,EAAyB,EAAE,EAAE;YAA7B,EAAE,UAAU,OAAa,EAAX,mCAAS;QACxD,8CAA8C;QAC9C,OAAO,MAAM,iCAAM,MAAM,KAAE,UAAU,kCAAO,UAAU,KAAE,OAAO,EAAE,SAAS,OAAK,CAAC;IAClF,CAAC,CAAC;IAED,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAS,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC;IAElD,OAAO,MAAM,CAAC;AAChB,CAAC;AA9BD,gDA8BC","sourcesContent":["import { ConfigPlugin, ExportedConfig, Mod, ModPlatform } from '../Plugin.types';\n\nfunction ensureArray<T>(input: T | T[]): T[] {\n  if (Array.isArray(input)) {\n    return input;\n  }\n  return [input];\n}\n\ntype AppliedConfigPlugin<T> = ConfigPlugin<T> | [ConfigPlugin<T>, T];\n\n/**\n * Plugin to chain a list of plugins together.\n *\n * @param config exported config\n * @param plugins list of config config plugins to apply to the exported config\n */\nexport const withPlugins: ConfigPlugin<AppliedConfigPlugin<any>[]> = (\n  config,\n  // TODO: Type this somehow if possible.\n  plugins\n): ExportedConfig => {\n  return plugins.reduce((prev, curr) => {\n    const [plugins, args] = ensureArray(curr);\n    return plugins(prev, args);\n  }, config);\n};\n\n/**\n * Plugin to extend a mod function in the plugins config.\n *\n * @param config exported config\n * @param platform platform to target (ios or android)\n * @param mod name of the platform function to extend\n * @param action method to run on the mod when the config is compiled\n */\nexport function withExtendedMod<T>(\n  config: ExportedConfig,\n  {\n    platform,\n    mod,\n    action,\n  }: {\n    platform: ModPlatform;\n    mod: string;\n    action: Mod<T>;\n  }\n): ExportedConfig {\n  return withInterceptedMod(config, {\n    platform,\n    mod,\n    async action({ modRequest: { nextMod, ...modRequest }, modResults, ...config }) {\n      const results = await action({ modRequest, modResults: modResults as T, ...config });\n      return nextMod!(results as any);\n    },\n  });\n}\n\nexport function withInterceptedMod<T>(\n  config: ExportedConfig,\n  {\n    platform,\n    mod,\n    action,\n  }: {\n    platform: ModPlatform;\n    mod: string;\n    action: Mod<T>;\n  }\n): ExportedConfig {\n  if (!config.mods) {\n    config.mods = {};\n  }\n  if (!config.mods[platform]) {\n    config.mods[platform] = {};\n  }\n\n  const modPlugin: Mod<T> =\n    (config.mods[platform] as Record<string, any>)[mod] ?? (config => config);\n\n  const extendedMod: Mod<T> = async ({ modRequest, ...config }) => {\n    // console.log(`-[mod]-> ${platform}.${mod}`);\n    return action({ ...config, modRequest: { ...modRequest, nextMod: modPlugin } });\n  };\n\n  (config.mods[platform] as any)[mod] = extendedMod;\n\n  return config;\n}\n"]}