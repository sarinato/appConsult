{"version":3,"file":"SplashScreen.js","sourceRoot":"","sources":["../../src/ios/SplashScreen.ts"],"names":[],"mappings":";;AAAA,2EAIuC;AAIvC,4DAAqD;AACrD,wDAA0D;AAE7C,QAAA,gBAAgB,GAAuB,MAAM,CAAC,EAAE;IAC3D,OAAO,8BAAgB,CAAC,MAAM,EAAE,KAAK,EAAC,MAAM,EAAC,EAAE;QAC7C,MAAM,oBAAoB,CAAC,MAAM,EAAE,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;QAClE,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,SAAgB,eAAe,CAAC,MAAkB;;IAChD,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,QAAC,MAAM,CAAC,GAAG,0CAAE,MAAM,CAAA,EAAE;QACzC,OAAO;KACR;IAED,MAAM,MAAM,GAA0B;QACpC,eAAe,0BACb,MAAM,CAAC,GAAG,0CAAE,MAAM,0CAAE,UAAU,yCAC9B,MAAM,CAAC,MAAM,0CAAE,UAAU,mCACzB,qDAA2B,CAAC,OAAO;QACrC,eAAe,0BACb,MAAM,CAAC,GAAG,0CAAE,MAAM,0CAAE,eAAe,yCAAI,MAAM,CAAC,MAAM,0CAAE,eAAe,mCAAI,SAAS;QACpF,KAAK,oBAAE,MAAM,CAAC,GAAG,0CAAE,MAAM,0CAAE,KAAK,yCAAI,MAAM,CAAC,MAAM,0CAAE,KAAK;KACzD,CAAC;IAEF,OAAO,MAAM,CAAC;AAChB,CAAC;AAhBD,0CAgBC;AAEM,KAAK,UAAU,oBAAoB,CAAC,MAAkB,EAAE,WAAmB;IAChF,MAAM,uBAAuB,GAAG,MAAM,CAAC,UAAU,KAAK,QAAQ,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;IACrF,IAAI,CAAC,uBAAuB,EAAE;QAC5B,iCAAa,CACX,QAAQ,EACR,2LAA2L,CAC5L,CAAC;QACF,OAAO;KACR;IAED,MAAM,YAAY,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC;IAE7C,IAAI,CAAC,YAAY,EAAE;QACjB,OAAO;KACR;IACD,IAAI;QACF,MAAM,kDAAwB,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;KAC3D;IAAC,OAAO,CAAC,EAAE;QACV,iCAAa,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;KAC5B;AACH,CAAC;AApBD,oDAoBC","sourcesContent":["import {\n  configureIosSplashScreen,\n  IosSplashScreenConfig,\n  SplashScreenImageResizeMode,\n} from '@expo/configure-splash-screen';\n\nimport { ExpoConfig } from '../Config.types';\nimport { ConfigPlugin } from '../Plugin.types';\nimport { addWarningIOS } from '../WarningAggregator';\nimport { withDangerousMod } from '../plugins/ios-plugins';\n\nexport const withSplashScreen: ConfigPlugin<void> = config => {\n  return withDangerousMod(config, async config => {\n    await setSplashScreenAsync(config, config.modRequest.projectRoot);\n    return config;\n  });\n};\n\nexport function getSplashScreen(config: ExpoConfig): IosSplashScreenConfig | undefined {\n  if (!config.splash && !config.ios?.splash) {\n    return;\n  }\n\n  const result: IosSplashScreenConfig = {\n    imageResizeMode:\n      config.ios?.splash?.resizeMode ??\n      config.splash?.resizeMode ??\n      SplashScreenImageResizeMode.CONTAIN,\n    backgroundColor:\n      config.ios?.splash?.backgroundColor ?? config.splash?.backgroundColor ?? '#FFFFFF', // white\n    image: config.ios?.splash?.image ?? config.splash?.image,\n  };\n\n  return result;\n}\n\nexport async function setSplashScreenAsync(config: ExpoConfig, projectRoot: string) {\n  const splashScreenIsSupported = config.sdkVersion === '39.0.0' || !config.sdkVersion;\n  if (!splashScreenIsSupported) {\n    addWarningIOS(\n      'splash',\n      'Unable to automatically configure splash screen. Please refer to the expo-splash-screen README for more information: https://github.com/expo/expo/tree/master/packages/expo-splash-screen'\n    );\n    return;\n  }\n\n  const splashConfig = getSplashScreen(config);\n\n  if (!splashConfig) {\n    return;\n  }\n  try {\n    await configureIosSplashScreen(projectRoot, splashConfig);\n  } catch (e) {\n    addWarningIOS('splash', e);\n  }\n}\n"]}