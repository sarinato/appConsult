{"version":3,"file":"Plugin.types.js","sourceRoot":"","sources":["../src/Plugin.types.ts"],"names":[],"mappings":"","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport { JSONObject } from '@expo/json-file';\nimport { XcodeProject } from 'xcode';\n\nimport { InfoPlist } from './ios/IosConfig.types';\n\ntype OptionalPromise<T> = Promise<T> | T;\n\ntype Plist = JSONObject;\n\nexport interface ModProps<T = any> {\n  /**\n   * Project root directory for the universal app.\n   */\n  readonly projectRoot: string;\n  /**\n   * Project root for the specific platform.\n   */\n  readonly platformProjectRoot: string;\n\n  /**\n   * Name of the mod.\n   */\n  readonly modName: string;\n\n  /**\n   * Name of the platform used in the mods config.\n   */\n  readonly platform: ModPlatform;\n\n  /**\n   * [iOS]: The path component used for querying project files.\n   *\n   * @example projectRoot/ios/[projectName]/\n   */\n  readonly projectName?: string;\n\n  nextMod?: Mod<T>;\n}\n\n// TODO: Migrate ProjectConfig to using expo instead if exp\nexport interface ExportedConfig extends ExpoConfig {\n  mods?: ModConfig | null;\n}\n\nexport interface ExportedConfigWithProps<Data = any> extends ExpoConfig {\n  /**\n   * The Object representation of a complex file type.\n   */\n  modResults: Data;\n  modRequest: ModProps<Data>;\n}\n\nexport type ConfigPlugin<Props = any> = (config: ExpoConfig, props: Props) => ExpoConfig;\n\nexport type Mod<Props = any> = (\n  config: ExportedConfigWithProps<Props>\n) => OptionalPromise<ExportedConfigWithProps<Props>>;\n\nexport interface ModConfig {\n  // android?: {\n  // };\n  ios?: {\n    infoPlist?: Mod<InfoPlist>;\n    entitlements?: Mod<Plist>;\n    expoPlist?: Mod<Plist>;\n    xcodeproj?: Mod<XcodeProject>;\n  };\n}\n\nexport type ModPlatform = keyof ModConfig;\n"]}